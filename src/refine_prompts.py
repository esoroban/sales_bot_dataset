import os
import json
import openai

DATA_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../data")
INPUT_FILE = os.path.join(DATA_DIR, "prompts.json")
OUTPUT_FILE = os.path.join(DATA_DIR, "refined_prompts.json")

from dotenv import load_dotenv
load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")

def load_prompts():
    if not os.path.exists(INPUT_FILE):
        print(f"‚ùå –§–∞–π–ª {INPUT_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ó–∞–ø—É—Å—Ç—ñ—Ç—å generate_prompts.py.")
        return []
    
    with open(INPUT_FILE, "r", encoding="utf-8") as file:
        prompts = json.load(file)
    
    if not prompts:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª prompts.json –ø–æ—Ä–æ–∂–Ω—ñ–π!")
    
    return prompts

def refine_prompt(prompt):
    """
    –õ–∏—à–µ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–Ω–µ –ø–æ–ª—ñ—Ä—É–≤–∞–Ω–Ω—è:
    - –ù–µ –∑–º—ñ–Ω—é—î —Ñ–∞–∫—Ç—ñ–≤ (–≤—ñ–∫, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ—Ç–µ–π, –ø—Ä–æ—Ñ–µ—Å—ñ—é —Ç–æ—â–æ).
    - –†–æ–∑–±–∏–≤–∞—î –Ω–∞ 1‚Äì2 –∞–±–∑–∞—Ü–∏, —Ä–æ–±–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏—Ä–æ–¥–Ω—ñ—à–∏–º —ñ –ª–µ–≥—à–∏–º.
    - –î–æ–¥–∞—î 1‚Äì2 –¥–µ—Ç–∞–ª—ñ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∏ (–∑–≥–∞–¥–∫–∞ –ø—Ä–æ –ø—Ä–∏—Ä–æ–¥—É, –Ω–∞—Å—Ç—Ä—ñ–π —Ç–æ—â–æ) –±–µ–∑ –∑–º—ñ–Ω–∏ —Ñ–∞–∫—Ç—ñ–≤.
    - –û–±–º–µ–∂—É—î—Ç—å—Å—è –¥–æ 8 —Ä–µ—á–µ–Ω—å.
    """
    
    system_prompt = """
–¢–∏ ‚Äî —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç —ñ –∫–æ—Ä–µ–∫—Ç–æ—Ä —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
–û—Ç—Ä–∏–º—É—î—à –º–æ–Ω–æ–ª–æ–≥ –≤—ñ–¥ –ø–µ—Ä—à–æ—ó –æ—Å–æ–±–∏ –ø—Ä–æ –ª—é–¥–∏–Ω—É (–≤—ñ–∫, –ø—Ä–æ—Ñ–µ—Å—ñ—è, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ—Ç–µ–π —Ç–æ—â–æ).
–ù–µ –∑–º—ñ–Ω—é–π –∂–æ–¥–Ω–∏—Ö —Ñ–∞–∫—Ç—ñ–≤ —ñ —á–∏—Å–µ–ª (–≤—ñ–∫, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ—Ç–µ–π, —Ä—ñ–≤–µ–Ω—å –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω–æ—Å—Ç—ñ, —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è).
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è:
1) –ó—Ä–æ–±–∏ —Ç–µ–∫—Å—Ç –ª–µ–≥—à–∏–º —ñ –ø—Ä–∏—Ä–æ–¥–Ω—ñ—à–∏–º: —É—Å—É–Ω—å –Ω–∞–¥–º—ñ—Ä–Ω—É —Å—É—Ö—ñ—Å—Ç—å —á–∏ –ø–æ–≤—Ç–æ—Ä–∏.
2) –î–æ–ø—É—Å—Ç–∏ 1‚Äì2 –∫–æ—Ä–æ—Ç–∫—ñ –¥–µ—Ç–∞–ª—ñ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–æ —Å—ñ–ª—å—Å—å–∫—É –º—ñ—Å—Ü–µ–≤—ñ—Å—Ç—å –∞–±–æ –º—ñ—Å—å–∫–∏–π —à—É–º), —â–æ –Ω–µ —Å—É–ø–µ—Ä–µ—á–∞—Ç—å —Ñ–∞–∫—Ç–∞–º.
3) –†–æ–∑–±–∏–π –º–∞–∫—Å–∏–º—É–º –Ω–∞ 2 –∞–±–∑–∞—Ü–∏, –∑–∞–≥–∞–ª–æ–º –Ω–µ –±—ñ–ª—å—à–µ 8 —Ä–µ—á–µ–Ω—å.
4) –ù–µ –ø—Ä–∏–¥—É–º—É–π –Ω–æ–≤–∏—Ö –æ–±—Å—Ç–∞–≤–∏–Ω (–Ω–µ –¥–æ–¥–∞–≤–∞–π –≤–∏–≥–∞–¥–∞–Ω–∏—Ö —Ö–æ–±—ñ, –¥—ñ—Ç–µ–π —á–∏ —á–∏—Å–µ–ª).
"""
    
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",  
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt["text"]}
            ],
            max_tokens=500,
            temperature=0.7
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return prompt["text"]

def refine_prompts():
    prompts = load_prompts()
    if not prompts:
        print("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–±—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–º–ø—Ç–∏!")
        return
    
    refined_prompts = []
    for i, pr in enumerate(prompts):
        print(f"üõ† –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç {i+1}: {pr['id']}...")
        refined_text = refine_prompt(pr)
        refined_prompts.append({"id": pr["id"], "text": refined_text})
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {pr['id']}!")

    with open(OUTPUT_FILE, "w", encoding="utf-8") as file:
        json.dump(refined_prompts, file, ensure_ascii=False, indent=4)

    print(f"\n‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {OUTPUT_FILE}!")

if __name__ == "__main__":
    refine_prompts()