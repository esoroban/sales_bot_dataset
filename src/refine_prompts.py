import os
import json
import openai

DATA_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../data")
INPUT_FILE = os.path.join(DATA_DIR, "prompts.json")
OUTPUT_FILE = os.path.join(DATA_DIR, "refined_prompts.json")

from dotenv import load_dotenv
load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")

def load_prompts():
    if not os.path.exists(INPUT_FILE):
        print(f"‚ùå –§–∞–π–ª {INPUT_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ó–∞–ø—É—Å—Ç—ñ—Ç—å generate_prompts.py.")
        return []
    
    with open(INPUT_FILE, "r", encoding="utf-8") as file:
        prompts = json.load(file)
    
    if not prompts:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª prompts.json –ø–æ—Ä–æ–∂–Ω—ñ–π!")
    
    return prompts

def refine_prompt(prompt):
    """
    –õ–∏—à–µ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–Ω–µ –ø–æ–ª—ñ—Ä—É–≤–∞–Ω–Ω—è:
    - –Ø–∫—â–æ –±–∞—á–∏–º–æ "–ú—ñ–π —Ä—ñ–≤–µ–Ω—å –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω–Ω—è: –ø–æ–º—ñ—Ä–Ω–∏–π —ñ–Ω—Ç–µ—Ä–µ—Å" ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞—Ç—è–∫ –Ω–∞ –≤–∞–≥–∞–Ω–Ω—è.
    - –ù–µ –∑–º—ñ–Ω—é—î–º–æ —Å—É—Ç—ñ.
    - –î–æ–¥–∞—î–º–æ 1‚Äì2 —Ä–µ—á–µ–Ω–Ω—è —ñ–∑ –ª–µ–≥–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ (–µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω/–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞).
    """
    system_prompt = """
–¢–∏ ‚Äî —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç —ñ –∫–æ—Ä–µ–∫—Ç–æ—Ä —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. 
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –º–æ–Ω–æ–ª–æ–≥ –≤—ñ–¥ –ø–µ—Ä—à–æ—ó –æ—Å–æ–±–∏ (–æ–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞), 
–∑–∞–ª–∏—à–∏–≤—à–∏ —Ñ–∞–∫—Ç–∏ (–≤—ñ–∫, –ø—Ä–æ—Ñ–µ—Å—ñ—é, –ø—Ä–∏—á–∏–Ω–∏), –∞–ª–µ –∑—Ä–æ–±–∏–≤—à–∏ —Ç–µ–∫—Å—Ç –ª–∞–∫–æ–Ω—ñ—á–Ω—ñ—à–∏–º —ñ –∂–≤–∞–≤—ñ—à–∏–º.
–û–±–º–µ–∂—Å—è 6‚Äì8 —Ä–µ—á–µ–Ω–Ω—è–º–∏. 
–Ø–∫—â–æ —Ä—ñ–≤–µ–Ω—å —ñ–Ω—Ç–µ—Ä–µ—Å—É = '–ø–æ–º—ñ—Ä–Ω–∏–π —ñ–Ω—Ç–µ—Ä–µ—Å', –ø—ñ–¥–∫—Ä–µ—Å–ª–∏ –Ω–µ–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å, –∞ –Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω—É –≤—ñ–¥–º–æ–≤—É.
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",  
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt["text"]}
            ],
            max_tokens=500,
            temperature=0.8
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return prompt["text"]

def refine_prompts():
    prompts = load_prompts()
    if not prompts:
        print("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–±—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–º–ø—Ç–∏!")
        return
    
    refined_prompts = []
    for i, pr in enumerate(prompts):
        print(f"üõ† –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç {i+1}: {pr['id']}...")
        refined_text = refine_prompt(pr)
        refined_prompts.append({"id": pr["id"], "text": refined_text})
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {pr['id']}!")

    with open(OUTPUT_FILE, "w", encoding="utf-8") as file:
        json.dump(refined_prompts, file, ensure_ascii=False, indent=4)

    print(f"\n‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {OUTPUT_FILE}!")

if __name__ == "__main__":
    refine_prompts()