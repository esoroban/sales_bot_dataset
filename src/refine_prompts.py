import os
import json
import openai

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—ñ–≤
DATA_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../data")
INPUT_FILE = os.path.join(DATA_DIR, "prompts.json")
OUTPUT_FILE = os.path.join(DATA_DIR, "refined_prompts.json")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API-–∫–ª—é—á–∞
from dotenv import load_dotenv
load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")

def load_prompts():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ prompts.json."""
    if not os.path.exists(INPUT_FILE):
        print(f"‚ùå –§–∞–π–ª {INPUT_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ó–∞–ø—É—Å—Ç—ñ—Ç—å generate_prompts.py.")
        return []
    
    with open(INPUT_FILE, "r", encoding="utf-8") as file:
        prompts = json.load(file)
    
    if not prompts:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª prompts.json –ø–æ—Ä–æ–∂–Ω—ñ–π!")
    
    return prompts

def refine_prompt(prompt):
    """
    –ü–æ–∫—Ä–∞—â—É—î —Ç–µ–∫—Å—Ç, —Ä–æ–±–ª—è—á–∏ –π–æ–≥–æ –ø—Ä–∏—Ä–æ–¥–Ω—ñ—à–∏–º —ñ –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    
    –í—Ä–∞—Ö–æ–≤–∞–Ω–æ:
    1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–µ—Ä—à—É –æ—Å–æ–±—É (–Ø, –ú–µ–Ω—ñ‚Ä¶).
    2. –î–æ–¥–∞—Ç–∏ 1‚Äì2 —Ä–µ—á–µ–Ω–Ω—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è, —á–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω–∏–π (–≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥—ñ—Ç–µ–π, –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —ñ–Ω—à–æ–≥–æ —Ö–æ–±—ñ —Ç–æ—â–æ).
    3. –ü–æ–≤‚Äô—è–∑–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é —ñ —Ö–æ–±—ñ –∑ –π–æ–≥–æ –≤—ñ–¥–º–æ–≤–æ—é –∞–±–æ –±–∞–π–¥—É–∂—ñ—Å—Ç—é.
    4. –£–Ω–∏–∫–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä—ñ–≤ —Ç–∞ –Ω–∞–¥–º—ñ—Ä–Ω–∏—Ö –≤–≤—ñ—á–ª–∏–≤–∏—Ö –∫–ª—ñ—à–µ.
    5. –¢–µ–∫—Å—Ç –º–∞—î –≤–º—ñ—â—É–≤–∞—Ç–∏—Å—è —É 3‚Äì4 —Ä–µ—á–µ–Ω–Ω—è.
    6. –ó–≥–∞–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∂–∏—Ç—Ç—è (–º—ñ—Å—Ç–æ/—Å–µ–ª–æ, —î –¥—ñ—Ç–∏/–Ω–µ–º–∞—î, —Ö–∞—Ä–∞–∫—Ç–µ—Ä).
    7. –Ø–∫—â–æ –Ω–µ–º–∞—î –¥—ñ—Ç–µ–π, –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—ñ–¥–º–æ–≤—É "–£ –¥–∏—Ç–∏–Ω–∏ –Ω–µ–º–∞—î —á–∞—Å—É".
    8. –•–∞—Ä–∞–∫—Ç–µ—Ä (–µ–º–ø–∞—Ç/–ª–æ–≥—ñ–∫/—ñ–Ω—Ç—Ä–æ–≤–µ—Ä—Ç/–µ–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç) –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ —É —Ç–æ–Ω—ñ. 
    """

    system_prompt = """
–¢–∏ ‚Äî —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç, —è–∫–∏–π –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Å—É—Ö—ñ –æ–ø–∏—Å–∏ –ª—é–¥–µ–π –Ω–∞ –∫–æ—Ä–æ—Ç–∫—ñ (3‚Äì4 —Ä–µ—á–µ–Ω–Ω—è) –º–æ–Ω–æ–ª–æ–≥–∏ –≤—ñ–¥ –ø–µ—Ä—à–æ—ó –æ—Å–æ–±–∏.

–ü—Ä–∞–≤–∏–ª–∞:
1. –ü–∏—à–∏ ¬´–Ø...¬ª –∑–∞–º—ñ—Å—Ç—å ¬´–¢–∏...¬ª.
2. –î–æ–¥–∞–π 1‚Äì2 —Ä–µ—á–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ, —á–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ —Ö–æ—á–µ/–Ω–µ –º–æ–∂–µ –∑–∞–π–º–∞—Ç–∏—Å—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –∫—É—Ä—Å–∞–º–∏ (–¥—ñ—Ç—è–º –Ω–µ —Ü—ñ–∫–∞–≤–æ, –Ω–µ–º–∞—î –¥—ñ—Ç–µ–π, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å).
3. –ó–≤‚Äô—è–∂–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é –∞–±–æ —Ö–æ–±—ñ –∑ —Ç–∞–∫–æ—é –ø–æ–∑–∏—Ü—ñ—î—é (–¥–∏–∑–∞–π–Ω–µ—Ä —Ü—ñ–Ω—É—î —Ç–≤–æ—Ä—á—ñ—Å—Ç—å, –ª—ñ–∫–∞—Ä –º–∞—î –º–∞–ª–æ –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Å—É, —ñ —Ç.–¥.).
4. –£–Ω–∏–∫–∞–π –ø–æ–≤—Ç–æ—Ä—ñ–≤ —ñ —Ñ–æ—Ä–º–∞–ª—å–Ω–∏—Ö –≤–≤—ñ—á–ª–∏–≤–∏—Ö —Ñ—Ä–∞–∑. 
5. –ù–µ –ø–µ—Ä–µ–≤–∏—â—É–π 3‚Äì4 —Ä–µ—á–µ–Ω—å. 
6. –Ø–∫—â–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —è–∫ ¬´–µ–º–ø–∞—Ç¬ª, ¬´–ª–æ–≥—ñ–∫¬ª, ¬´—ñ–Ω—Ç—Ä–æ–≤–µ—Ä—Ç¬ª —á–∏ ¬´–µ–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç¬ª ‚Äî –≤—ñ–¥–æ–±—Ä–∞–∑–∏ —Ü–µ –≤ —Ç–æ–Ω—ñ –º–æ–≤–ª–µ–Ω–Ω—è.
7. –Ø–∫—â–æ –Ω–µ–º–∞—î –¥—ñ—Ç–µ–π, –≤—ñ–¥–º–æ–≤–∞ ¬´–£ –¥–∏—Ç–∏–Ω–∏ –Ω–µ–º–∞—î —á–∞—Å—É¬ª –Ω–µ–ª–æ–≥—ñ—á–Ω–∞. –ú—ñ–Ω—è–π –Ω–∞ ¬´–ú–µ–Ω—ñ —Ü–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ¬ª –∞–±–æ ¬´–ù–µ–º–∞—î –¥–ª—è –∫–æ–≥–æ¬ª.
8. –Ø–∫—â–æ —î –¥—ñ—Ç–∏, –∫–æ—Ä–æ—Ç–∫–æ –∑–≥–∞–¥–∞–π, —á–æ–º—É —Å–∞–º–µ –≤–æ–Ω–∏ –Ω–µ –º–∞—é—Ç—å —á–∞—Å—É —á–∏ —ñ–Ω—Ç–µ—Ä–µ—Å—É.
    """

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt["text"]}
            ],
            max_tokens=500,
            temperature=0.7
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return prompt["text"]

def refine_prompts():
    """–ß–∏—Ç–∞—î –ø—Ä–æ–º–ø—Ç–∏, –ø–æ–∫—Ä–∞—â—É—î —ó—Ö —ñ –∑–±–µ—Ä—ñ–≥–∞—î —É –Ω–æ–≤–∏–π JSON."""
    prompts = load_prompts()
    if not prompts:
        print("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–±—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–º–ø—Ç–∏!")
        return
    
    refined_prompts = []

    for i, prompt in enumerate(prompts):
        print(f"üõ† –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç {i+1}: {prompt['id']}...")
        refined_text = refine_prompt(prompt)
        refined_prompts.append({"id": prompt["id"], "text": refined_text})
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {prompt['id']}!")

    with open(OUTPUT_FILE, "w", encoding="utf-8") as file:
        json.dump(refined_prompts, file, ensure_ascii=False, indent=4)

    print(f"\n‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {OUTPUT_FILE}!")

if __name__ == "__main__":
    refine_prompts()