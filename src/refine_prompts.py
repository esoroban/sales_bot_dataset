import os
import json
import openai

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—ñ–≤
DATA_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../data")
INPUT_FILE = os.path.join(DATA_DIR, "prompts.json")
OUTPUT_FILE = os.path.join(DATA_DIR, "refined_prompts.json")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API-–∫–ª—é—á–∞
from dotenv import load_dotenv
load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")

def load_prompts():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ prompts.json."""
    if not os.path.exists(INPUT_FILE):
        print(f"‚ùå –§–∞–π–ª {INPUT_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ó–∞–ø—É—Å—Ç—ñ—Ç—å generate_prompts.py.")
        return []
    
    with open(INPUT_FILE, "r", encoding="utf-8") as file:
        prompts = json.load(file)
    
    if not prompts:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª prompts.json –ø–æ—Ä–æ–∂–Ω—ñ–π!")
    
    return prompts

def refine_prompt(prompt):
    """
    –õ–∏—à–µ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ –ø–æ–∫—Ä–∞—â—É—î —Ç–∞ –¥–æ–¥–∞—î –ª–µ–≥–∫—É —Ñ–∞–Ω—Ç–∞–∑—ñ–π–Ω—ñ—Å—Ç—å –¥–æ —Å–∏—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç—É:
    - –ù–µ –∑–º—ñ–Ω—é—î —Ñ–∞–∫—Ç–∞–∂ (–≤—ñ–∫, –ø—Ä–æ—Ñ–µ—Å—ñ—é, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥—ñ—Ç–µ–π).
    - –ü—ñ–¥–ø—Ä–∞–≤–ª—è—î –≥—Ä–∞–º–∞—Ç–∏–∫—É —Ç–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.
    - –î–æ–¥–∞—î 1‚Äì2 –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, —â–æ —Ä–æ–±–ª—è—Ç—å —Ç–µ–∫—Å—Ç –∂–∏–≤—ñ—à–∏–º (–µ–º–æ—Ü—ñ–π–Ω–∏–π —à—Ç—Ä–∏—Ö, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞).
    - –û–±–º–µ–∂—É—î—Ç—å—Å—è 6 —Ä–µ—á–µ–Ω–Ω—è–º–∏ –º–∞–∫—Å–∏–º—É–º.
    """

    system_prompt = """
–¢–∏ ‚Äî —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç —ñ —Ä–µ–¥–∞–∫—Ç–æ—Ä —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, —â–æ —Ä–æ–±–∏—Ç—å –º–æ–Ω–æ–ª–æ–≥ –≤—ñ–¥ –ø–µ—Ä—à–æ—ó –æ—Å–æ–±–∏ –±—ñ–ª—å—à –∫—Ä–∞—Å–∏–≤–∏–º —ñ —Ç—Ä–æ—Ö–∏ –µ–º–æ—Ü—ñ–π–Ω–∏–º. 
–ü—Ä–∏ —Ü—å–æ–º—É —Ç–∏ –ù–ï –∑–º—ñ–Ω—é—î—à —Ñ–∞–∫—Ç–∏, –∑–∞–∫–ª–∞–¥–µ–Ω—ñ –≤ —Ç–µ–∫—Å—Ç—ñ (–≤—ñ–∫, –ø—Ä–æ—Ñ–µ—Å—ñ—é, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —á–∏ –≤—ñ–∫ –¥—ñ—Ç–µ–π, –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥–º–æ–≤–∏). 
–¢–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è:
1. –ó–∞–ª–∏—à–∏—Ç–∏ –æ–±—Å—è–≥ –¥–æ 12 —Ä–µ—á–µ–Ω—å.
2. –ü—Ä–∏–±—Ä–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–∏, –æ—á–µ–≤–∏–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º–∏.
3. –î–æ–¥–∞—Ç–∏ –ª–µ–≥–∫—É —Ñ–∞–Ω—Ç–∞–∑—ñ–π–Ω—É –¥–µ—Ç–∞–ª—å (1‚Äì2 —Ä–µ—á–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—Å—Ç—Ä—ñ–π —á–∏ –æ—Ç–æ—á–µ–Ω–Ω—è), —â–æ –Ω–µ —Å—É–ø–µ—Ä–µ—á–∏—Ç—å —Ñ–∞–∫—Ç–∞–º.
4. –ù–µ –≤–≤–æ–¥–∏—Ç–∏ –Ω–æ–≤–∏—Ö —Ñ–∞–∫—Ç—ñ–≤, —è–∫—ñ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–º—ñ–Ω—é—é—Ç—å –∑–º—ñ—Å—Ç (–Ω–∞–ø—Ä. –Ω–µ –≤–∏–≥–∞–¥—É–π —ñ–Ω—à—É –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥–º–æ–≤–∏).
5. –ú–æ–≤–∞ ‚Äî –ø—Ä–∏—Ä–æ–¥–Ω–∞, –∂–≤–∞–≤–∞, –±–µ–∑ –Ω–∞–¥–º—ñ—Ä–Ω–æ—ó –≤–≤—ñ—á–ª–∏–≤–æ—Å—Ç—ñ.
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt["text"]}
            ],
            max_tokens=500,
            temperature=0.8  # —Ç—Ä—ñ—à–∫–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return prompt["text"]

def refine_prompts():
    """–ß–∏—Ç–∞—î –ø—Ä–æ–º–ø—Ç–∏, –ø–æ–∫—Ä–∞—â—É—î —ó—Ö —Å—Ç–∏–ª—ñ—Å—Ç–∏—á–Ω–æ/–ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ —ñ –∑–±–µ—Ä—ñ–≥–∞—î –≤ refined_prompts.json."""
    prompts = load_prompts()
    if not prompts:
        print("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–±—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–º–ø—Ç–∏!")
        return
    
    refined_prompts = []

    for i, prompt in enumerate(prompts):
        print(f"üõ† –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç {i+1}: {prompt['id']}...")
        refined_text = refine_prompt(prompt)
        refined_prompts.append({"id": prompt["id"], "text": refined_text})
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {prompt['id']}!")

    with open(OUTPUT_FILE, "w", encoding="utf-8") as file:
        json.dump(refined_prompts, file, ensure_ascii=False, indent=4)

    print(f"\n‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {OUTPUT_FILE}!")

if __name__ == "__main__":
    refine_prompts()