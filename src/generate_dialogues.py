import os
import json
import uuid
import openai
import random

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
DATA_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../data")
PROMPTS_FILE = os.path.join(DATA_DIR, "refined_prompts.json")  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ prompts.json
DIALOGUES_FILE = os.path.join(DATA_DIR, "dialogues.json")
BOT_PROMPT_FILE = os.path.join(DATA_DIR, "bot_prompt.txt")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
NUM_DIALOGUES = 10
NUM_EXCHANGES = 10

# –ú–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–ª—ñ—î–Ω—Ç–∞ –ø—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ —ñ–Ω—Ç–µ—Ä–µ—Å—É
NO_INTEREST_RESPONSES = [
    "–ú–µ–Ω—ñ —Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ.",
    "–ù–µ —Ü—ñ–∫–∞–≤–æ.",
    "–£ –º–µ–Ω–µ —ñ–Ω—à—ñ –ø–ª–∞–Ω–∏.",
    "–Ø –Ω–µ –¥—É–º–∞—é, —â–æ —Ü–µ –∫–æ—Ä–∏—Å–Ω–æ.",
    "–Ø –Ω–µ —à—É–∫–∞—é –ø–æ–¥—ñ–±–Ω–æ–≥–æ."
]

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API-–∫–ª—é—á–∞
from dotenv import load_dotenv
load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")

def load_file(file_path):
    """–ß–∏—Ç–∞—î –≤–º—ñ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É."""
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return ""

    with open(file_path, "r", encoding="utf-8") as file:
        return file.read().strip()

def load_prompts(file_path):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON."""
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return []

    with open(file_path, "r", encoding="utf-8") as file:
        prompts = json.load(file)

    if not prompts:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª –ø—Ä–æ–º–ø—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!")

    return prompts

def generate_ai_response(messages):
    """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å OpenAI –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ä–µ–ø–ª—ñ–∫."""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages,
            max_tokens=500,
            temperature=0.7
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")
        return ""

def create_dialogue(prompt, bot_prompt):
    """–°—Ç–≤–æ—Ä—é—î –¥—ñ–∞–ª–æ–≥ –º—ñ–∂ –±–æ—Ç–æ–º —Ç–∞ –∫–ª—ñ—î–Ω—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤—ñ –π–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É."""
    conversation_id = str(uuid.uuid4())
    dialogue_history = []

    # –í–∏—Ç—è–≥—É—î–º–æ —Ä—ñ–≤–µ–Ω—å —ñ–Ω—Ç–µ—Ä–µ—Å—É –∫–ª—ñ—î–Ω—Ç–∞
    interest_level = "–Ω–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–µ—Å—É" if "–Ω–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–µ—Å—É" in prompt["text"] else "—Å–ª–∞–±–∫–∏–π —ñ–Ω—Ç–µ—Ä–µ—Å"

    # –ë–∞–∑–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –±–µ–∑ –∑–≥–∞–¥–∫–∏ –ø—Ä–æ –¥—ñ—Ç–µ–π
    bot_greeting = "–í—ñ—Ç–∞—é! –ß–∏ —Ü—ñ–∫–∞–≤–∏—Ç–µ—Å—å —Ä–æ–∑–≤–∏—Ç–∫–æ–º –∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≤–∏—á–æ–∫?"

    bot_messages = [
        {"role": "system", "content": bot_prompt},
        {"role": "assistant", "content": bot_greeting}
    ]

    client_messages = [
        {"role": "system", "content": "–¢–∏ –∑–≤–∏—á–∞–π–Ω–∏–π –∫–ª—ñ—î–Ω—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∑–≥—ñ–¥–Ω–æ —Å–≤–æ–≥–æ —Å—Ç–∏–ª—é."},
        {"role": "user", "content": prompt["text"]}
    ]

    dialogue = {
        "conversation_id": conversation_id,
        "dialogue": []
    }

    print(f"\n=== üîµ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥—ñ–∞–ª–æ–≥—É –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {prompt['id']} ===\n")

    for i in range(NUM_EXCHANGES):
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞
        bot_response = generate_ai_response(bot_messages + dialogue_history)
        if not bot_response:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –ë–æ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä—É–≤–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å!")
            continue

        dialogue_history.append({"role": "assistant", "content": bot_response})
        dialogue["dialogue"].append({"role": "sales_bot", "message": bot_response})
        print(f"ü§ñ –ë–æ—Ç: {bot_response}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–≤–Ω—è —ñ–Ω—Ç–µ—Ä–µ—Å—É –∫–ª—ñ—î–Ω—Ç–∞
        if interest_level == "–Ω–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–µ—Å—É":
            client_response = random.choice(NO_INTEREST_RESPONSES)  # –û–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            dialogue["dialogue"].append({"role": "client", "message": client_response})
            print(f"üßë‚Äçüíº –ö–ª—ñ—î–Ω—Ç: {client_response}\n")
            break  # –Ø–∫—â–æ —ñ–Ω—Ç–µ—Ä–µ—Å—É –Ω–µ–º–∞—î, —Ä–æ–∑–º–æ–≤–∞ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è —à–≤–∏–¥—à–µ

        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç–∞
        client_messages.append({"role": "user", "content": bot_response})
        client_response = generate_ai_response(client_messages + dialogue_history)

        if not client_response or client_response == bot_response:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –ö–ª—ñ—î–Ω—Ç –ø–æ–≤—Ç–æ—Ä—é—î –±–æ—Ç–∞! –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å...")
            client_messages.pop()
            client_response = generate_ai_response(client_messages + dialogue_history)

        dialogue_history.append({"role": "user", "content": client_response})
        dialogue["dialogue"].append({"role": "client", "message": client_response})
        print(f"üßë‚Äçüíº –ö–ª—ñ—î–Ω—Ç: {client_response}\n")

    if len(dialogue["dialogue"]) < 2:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –î—ñ–∞–ª–æ–≥ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å!")
        return None

    return dialogue

def save_dialogues(dialogues, file_path):
    """–ó–±–µ—Ä—ñ–≥–∞—î –¥—ñ–∞–ª–æ–≥–∏ —É JSON-—Ñ–∞–π–ª."""
    if not dialogues:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –°–ø–∏—Å–æ–∫ –¥—ñ–∞–ª–æ–≥—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π, –Ω—ñ—á–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏.")
        return

    try:
        if os.path.exists(file_path):
            os.remove(file_path)

        with open(file_path, "w", encoding="utf-8") as file:
            json.dump(dialogues, file, ensure_ascii=False, indent=4)
        print(f"\n‚úÖ –î—ñ–∞–ª–æ–≥–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {file_path}.")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")

def main():
    """–ì–µ–Ω–µ—Ä—É—î –¥—ñ–∞–ª–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–æ–º–ø—Ç—ñ–≤."""
    prompts = load_prompts(PROMPTS_FILE)
    bot_prompt = load_file(BOT_PROMPT_FILE)  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–º–ø—Ç –±–æ—Ç–∞

    if not prompts or not bot_prompt:
        print("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥–∏ –±–µ–∑ –ø—Ä–æ–º–ø—Ç—ñ–≤!")
        return

    dialogues = []
    for i, prompt in enumerate(prompts[:NUM_DIALOGUES]):
        print(f"\nüõ† –ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –¥—ñ–∞–ª–æ–≥ {i+1} –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞...")
        dialogue = create_dialogue(prompt, bot_prompt)
        if dialogue:
            dialogues.append(dialogue)

    print(f"\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º: {len(dialogues)} –¥—ñ–∞–ª–æ–≥(–∏) –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ.")
    save_dialogues(dialogues, DIALOGUES_FILE)

if __name__ == "__main__":
    main()