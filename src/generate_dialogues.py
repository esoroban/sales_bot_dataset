import os
import json
import uuid
import openai
import random

from dialogue_functions import stop_dialogue_schema, handle_ai_function_call, stop_dialogue

DATA_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../data")
PROMPTS_FILE = os.path.join(DATA_DIR, "refined_prompts.json")
DIALOGUES_FILE = os.path.join(DATA_DIR, "dialogues.json")
BOT_PROMPT_FILE = os.path.join(DATA_DIR, "bot_prompt.txt")

NUM_DIALOGUES = 10
NUM_EXCHANGES = 10

NO_INTEREST_RESPONSES = [
    "–ú–µ–Ω—ñ —Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ.",
    "–ù–µ —Ü—ñ–∫–∞–≤–æ.",
    "–£ –º–µ–Ω–µ —ñ–Ω—à—ñ –ø–ª–∞–Ω–∏.",
    "–Ø –Ω–µ –¥—É–º–∞—é, —â–æ —Ü–µ –∫–æ—Ä–∏—Å–Ω–æ.",
    "–Ø –Ω–µ —à—É–∫–∞—é –ø–æ–¥—ñ–±–Ω–æ–≥–æ."
]

from dotenv import load_dotenv
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

def load_file(file_path):
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return ""
    with open(file_path, "r", encoding="utf-8") as f:
        return f.read().strip()

def load_prompts(file_path):
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return []
    with open(file_path, "r", encoding="utf-8") as f:
        data = json.load(f)
    if not data:
        print("‚ùå –§–∞–π–ª –ø—Ä–æ–º–ø—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!")
    return data

def generate_bot_response(bot_context):
    """
    –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ë–û–¢–ê (assistant) –∑ function calling.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î gpt-4o, –∞–ª–µ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —É –≤–∞—Å —î –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è
    –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é function calling (–∑–∞ –≤–∞—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏).
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=bot_context,
            max_tokens=300,
            temperature=0.7,
            functions=[stop_dialogue_schema],
            function_call="auto"  # –î–æ–∑–≤–æ–ª—è—î–º–æ GPT –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏
        )
        return response
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–æ—Ç–∞: {e}")
        return None

def generate_client_response(client_context):
    """
    –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ö–õ–Ü–Ñ–ù–¢–ê (assistant) –±–µ–∑ function calling.
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=client_context,
            max_tokens=300,
            temperature=0.7
        )
        return response
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–ª—ñ—î–Ω—Ç–∞: {e}")
        return None

def extract_bot_message_or_stop(response):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ—Å–ø–æ–Ω—Å –≤—ñ–¥ –±–æ—Ç–∞.
    –Ø–∫—â–æ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ stop_dialogue -> handle_ai_function_call(choice) –ø–æ–≤–µ—Ä—Ç–∞—î True,
    —Ç–æ–¥—ñ (None, True). –Ü–Ω–∞–∫—à–µ (bot_text, False).
    """
    if not response or "choices" not in response:
        return None, False
    choice = response["choices"][0]

    # –Ø–∫—â–æ –º–æ–¥–µ–ª—å –≤–∏–∫–ª–∏–∫–∞–ª–∞ —Ñ—É–Ω–∫—Ü—ñ—é stop_dialogue
    if handle_ai_function_call(choice):
        return None, True

    # –Ü–Ω–∞–∫—à–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç
    bot_msg = choice["message"].get("content", "")
    return bot_msg.strip(), False

def extract_client_message(response):
    """
    –í–∏—Ç—è–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç —ñ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–ª—ñ—î–Ω—Ç–∞ (assistant, –±–µ–∑ function_call).
    """
    if not response or "choices" not in response:
        return None
    choice = response["choices"][0]
    return choice["message"].get("content", "").strip()

def create_dialogue(prompt, bot_prompt):
    conversation_id = str(uuid.uuid4())
    dialogue = {
        "conversation_id": conversation_id,
        "dialogue": []
    }

    # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —î "–Ω–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–µ—Å—É"
    interest_level = "—Å–ª–∞–±–∫–∏–π —ñ–Ω—Ç–µ—Ä–µ—Å"
    if "–Ω–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–µ—Å—É" in prompt["text"]:
        interest_level = "–Ω–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–µ—Å—É"

    bot_context = [
        {"role": "system", "content": bot_prompt}
    ]
    client_system = f"""
–¢–∏ ‚Äî –∑–≤–∏—á–∞–π–Ω–∏–π –∫–ª—ñ—î–Ω—Ç, –Ω–µ –ø—Ä–æ–ø–æ–Ω—É—î—à –∑—É—Å—Ç—Ä—ñ—á–Ω—É –¥–æ–ø–æ–º–æ–≥—É.
–û—Å—å —Ç–≤—ñ–π –æ–ø–∏—Å: {prompt["text"]}
"""
    client_context = [
        {"role": "system", "content": client_system}
    ]

    # –ü–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
    greet = "–í—ñ—Ç–∞—é! –ß–∏ —Ü—ñ–∫–∞–≤–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –Ω–∞—à—ñ –∫—É—Ä—Å–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è –¥—ñ—Ç–µ–π 5‚Äì12 —Ä–æ–∫—ñ–≤?"
    bot_context.append({"role": "assistant", "content": greet})
    dialogue["dialogue"].append({"role": "sales_bot", "message": greet})
    print(f"[–ë–û–¢]: {greet}")

    # –ö–ª—ñ—î–Ω—Ç
    client_context.append({"role": "user", "content": greet})
    resp_client = generate_client_response(client_context)
    if not resp_client:
        return None
    client_msg = extract_client_message(resp_client)
    if not client_msg:
        return None

    dialogue["dialogue"].append({"role": "client", "message": client_msg})
    print(f"[–ö–õ–Ü–Ñ–ù–¢]: {client_msg}")

    client_context.append({"role": "assistant", "content": client_msg})
    bot_context.append({"role": "user", "content": client_msg})

    refusal_count = 0

    for step in range(NUM_EXCHANGES):
        # –Ø–∫—â–æ "–Ω–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–µ—Å—É" - –∑–∞–≤–µ—Ä—à—É—î–º–æ –æ–¥—Ä–∞–∑—É
        if interest_level == "–Ω–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–µ—Å—É":
            denial = random.choice(NO_INTEREST_RESPONSES)
            dialogue["dialogue"].append({"role": "client", "message": denial})
            print(f"[–ö–õ–Ü–Ñ–ù–¢]: {denial} (–Ω–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–µ—Å—É)\n")
            # –ë–æ—Ç –∫–∞–∂–µ –æ—Å—Ç–∞–Ω–Ω—é —Ñ—Ä–∞–∑—É, –≤–∏–∫–ª–∏–∫–∞—î stop_dialogue
            final_bot = "–ó—Ä–æ–∑—É–º—ñ–ª–æ, —Ç–æ–¥—ñ —É—Å–ø—ñ—Ö—ñ–≤! –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è."
            dialogue["dialogue"].append({"role": "sales_bot", "message": final_bot})
            print(f"[–ë–û–¢]: {final_bot}\n")
            stop_dialogue("–Ω–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–µ—Å—É - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è")
            break

        # 1. –ë–æ—Ç
        resp_bot = generate_bot_response(bot_context)
        if not resp_bot:
            break
        bot_msg, stop_called = extract_bot_message_or_stop(resp_bot)
        if stop_called:
            # —Ñ—É–Ω–∫—Ü—ñ—è stop_dialogue –≤–∏–∫–ª–∏–∫–∞–Ω–∞
            break
        if not bot_msg:
            break

        dialogue["dialogue"].append({"role": "sales_bot", "message": bot_msg})
        print(f"[–ë–û–¢]: {bot_msg}")

        bot_context.append({"role": "assistant", "content": bot_msg})
        client_context.append({"role": "user", "content": bot_msg})

        # 2. –ö–ª—ñ—î–Ω—Ç
        resp_client = generate_client_response(client_context)
        if not resp_client:
            break
        client_reply = extract_client_message(resp_client)
        if not client_reply:
            break

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥–º–æ–≤—É
        low = client_reply.lower()
        refusal_keywords = ["–Ω–µ —Ü—ñ–∫–∞–≤–æ", "–Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ", "–≤—ñ–¥–º–æ–≤–ª—è—é—Å—è", "–Ω–µ –º–∞—é —á–∞—Å—É",
                            "–Ω–µ –ø–ª–∞–Ω—É—é", "–Ω–µ –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω–∞", "–Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å", "–Ω—ñ, –¥—è–∫—É—é"]
        if any(kw in low for kw in refusal_keywords):
            refusal_count += 1

        dialogue["dialogue"].append({"role": "client", "message": client_reply})
        print(f"[–ö–õ–Ü–Ñ–ù–¢]: {client_reply}\n")

        client_context.append({"role": "assistant", "content": client_reply})
        bot_context.append({"role": "user", "content": client_reply})

        # –Ø–∫—â–æ 2 –≤—ñ–¥–º–æ–≤–∏ - –±–æ—Ç –∫–∞–∂–µ –æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ -> –≤–∏–∫–ª–∏–∫ stop_dialogue
        if refusal_count >= 2:
            final_bot = "–ó—Ä–æ–∑—É–º—ñ–ª–æ, –¥—è–∫—É—é –∑–∞ –≤–∞—à —á–∞—Å! –£—Å–ø—ñ—Ö—ñ–≤ —ñ –≤—Å—å–æ–≥–æ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ!"
            dialogue["dialogue"].append({"role": "sales_bot", "message": final_bot})
            print(f"[–ë–û–¢]: {final_bot}\n")

            # –Ü–Ω—ñ—Ü—ñ—é—î–º–æ –≤–∏–∫–ª–∏–∫
            # –Ü–º—ñ—Ç—É—î–º–æ function_call stop_dialogue
            handle_ai_function_call({
                "message": {
                    "function_call": {
                        "name": "stop_dialogue",
                        "arguments": '{"reason":"–¥—Ä—É–≥–∞ –≤—ñ–¥–º–æ–≤–∞"}'
                    }
                }
            })
            break

    if len(dialogue["dialogue"]) < 2:
        print("‚ùå –ù–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –¥—ñ–∞–ª–æ–≥.")
        return None

    return dialogue

def save_dialogues(dialogues, file_path):
    if not dialogues:
        print("‚ùå –ù–µ–º–∞—î –¥—ñ–∞–ª–æ–≥—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")
        return
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(dialogues, f, ensure_ascii=False, indent=4)
        print(f"\n‚úÖ –î—ñ–∞–ª–æ–≥–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {file_path}.")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")

def main():
    prompts = load_prompts(PROMPTS_FILE)
    bot_prompt = load_file(BOT_PROMPT_FILE)

    if not prompts or not bot_prompt:
        print("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö!")
        return

    dialogues = []
    for i, prompt in enumerate(prompts[:NUM_DIALOGUES]):
        print(f"\nüõ† –ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –¥—ñ–∞–ª–æ–≥ {i+1} –¥–ª—è '{prompt['id']}'...\n")
        d = create_dialogue(prompt, bot_prompt)
        if d:
            dialogues.append(d)

    save_dialogues(dialogues, DIALOGUES_FILE)

if __name__ == "__main__":
    main()